import com.github.jk1.license.render.*

plugins {
    id 'com.palantir.git-version' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.springframework.boot' version '3.3.0' apply false
    id 'org.owasp.dependencycheck' version '9.2.0'
    id 'com.github.jk1.dependency-license-report' version '2.8'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'com.diffplug.spotless' version '6.14.1'
    id 'jacoco'
}

version = gitVersion()

allprojects {
    apply plugin: 'idea'

    ext {
        organisation = 'com.myorganisation'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

subprojects {
    group = 'everest.engineering.starter.kit'

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.diffplug.spotless'

    version = gitVersion()

    repositories {
        mavenCentral()
        mavenLocal()
    }

    ext {
        axonCryptoShreddingVersion = '2.0.0'
        mediaVersion = '0.9.12'
        storageVersion = '1.1.0'

        axonVersion = '4.9.3'
        commonsLangVersion = '3.14.0'
        commonsTextVersion = '1.12.0'
        commonsValidatorVersion = '1.9.0'
        keycloakVersion = '25.0.0'
        liquibaseVersion = '4.19.1'
        lombokVersion = '1.18.32'
        postgresDriverVersion = '42.5.1'
        prometheusSimpleClientVersion = '0.16.0'
        springBootVersion = '3.3.0'
        springdocVersion = '2.5.0'

        gradleDockerComposeVersion = '0.17.7'
        hamcrestVersion = '2.2'
        junitVersion = '5.10.2'
        mockitoVersion = '5.12.0'
        slf4jTestVersion = '3.0.1'
        springSecurityTestAddonVersion = '6.0.12'
        zonkyEmbeddedDbVersion = '2.5.1'
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    compileJava {
        options.compilerArgs << '-parameters'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }

    checkstyle {
        toolVersion = '10.3'
        maxWarnings = 0
        configFile = file("${project.rootDir}/build-config/checkstyle/checkstyle.xml")
        sourceSets = [sourceSets.main]
    }

    pmd {
        toolVersion = '6.46.0'
        incrementalAnalysis = true
        ruleSets = []
        ruleSetFiles = files("${project.rootDir}/build-config/pmd/pmd-ruleset.xml")
        sourceSets = [sourceSets.main]
    }

    spotless {
        format 'misc', {
            target '*.gradle', '*.md', '.gitignore'
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
        }
        java {
            eclipse().configFile("$rootDir/build-config/eclipse-formatter-config.xml")
            indentWithSpaces(4)
            trimTrailingWhitespace()
            removeUnusedImports()
        }
    }

    test {
        useJUnitPlatform()
        test {
            testLogging {
                events "skipped", "failed"
                exceptionFormat "full"
                showStandardStreams = false
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.deprecation = true
    }

    build.dependsOn(spotlessApply)
}

dependencyCheck {
    formats = ['ALL']
    scanConfigurations = ['bootArchives', 'productionRuntimeClasspath']
}

licenseReport {
    renderers = [new InventoryHtmlReportRenderer()]
}

apply from: 'sonar.gradle'
