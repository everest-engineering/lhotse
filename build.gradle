import com.github.jk1.license.render.*

plugins {
    id 'com.palantir.git-version' version '0.15.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.7.0' apply false
    id 'org.owasp.dependencycheck' version '6.5.1'
    id 'com.github.jk1.dependency-license-report' version '1.16'
    id 'org.sonarqube' version '3.4.0.2513'
    id 'com.diffplug.spotless' version '6.6.0'
    id 'jacoco'
}

version = gitVersion()

allprojects {
    apply plugin: 'idea'

    ext {
        organisation = 'com.myorganisation'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

subprojects {
    group = 'everest.engineering.starter.kit'

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.diffplug.spotless'

    version = gitVersion()

    repositories {
        mavenCentral()
        mavenLocal()
    }

    ext {
        axonCryptoShreddingVersion = '1.0.0'
        mediaVersion = '0.9.10'
        storageVersion = '1.0.2'

        axonVersion = '4.5.15'
        bouncyCastleVersion = '1.71'
        commonsLangVersion = '3.12.0'
        commonsTextVersion = '1.9'
        commonsValidatorVersion = '1.7'
        ehCacheVersion = '3.10.0'
        javaXCacheVersion = '1.1.1'
        javaXPersistenceVersion = '2.2'
        jsonHelperVersion = '20220320'
        keycloakVersion = '19.0.0'
        liquibaseVersion = '4.9.0'
        lombokVersion = '1.18.24'
        microMeterPrometheusVersion = '1.9.0'
        postgresDriverVersion = '42.3.6'
        prometheusSimpleClientVersion = '0.15.0'
        springBootVersion = '2.7.0'
        springdocVersion = '1.6.9'
        webfluxVersion = '2.7.0'

        gradleDockerComposeVersion = '0.15.2'
        hamcrestVersion = '2.2'
        junitVersion = '5.8.2'
        mockitoVersion = '4.6.1'
        slf4jTestVersion = '2.6.0'
        zonkyEmbeddedDbVersion = '2.1.1'
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }

    checkstyle {
        toolVersion = '10.3'
        maxWarnings = 0
        configFile = file("${project.rootDir}/build-config/checkstyle/checkstyle.xml")
        sourceSets = [sourceSets.main]
    }

    pmd {
        toolVersion = '6.46.0'
        incrementalAnalysis = true
        ruleSets = []
        ruleSetFiles = files("${project.rootDir}/build-config/pmd/pmd-ruleset.xml")
        sourceSets = [sourceSets.main]
    }

    spotless {
        format 'misc', {
            target '*.gradle', '*.md', '.gitignore'
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
        }
        java {
            eclipse().configFile("$rootDir/build-config/eclipse-formatter-config.xml")
            indentWithSpaces(4)
            trimTrailingWhitespace()
            removeUnusedImports()
        }
    }

    test {
        useJUnitPlatform()
        test {
            testLogging {
                events "skipped", "failed"
                exceptionFormat "full"
                showStandardStreams = false
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.deprecation = true
    }

    build.dependsOn(spotlessApply)
}

dependencyCheck {
    formats = ['ALL']
    scanConfigurations = ['bootArchives', 'productionRuntimeClasspath']
}

licenseReport {
    renderers = [new InventoryHtmlReportRenderer()]
}

apply from: 'sonar.gradle'
