server.port=8080
# Support integration with Keycloak when running behind a TLS terminating proxy
server.forward-headers-strategy=framework
# Complete in-progress requests
server.shutdown=graceful

# ------- workaround for legacy springfox -------
spring.mvc.pathmatch.matching-strategy=ant_path_matcher
# -----------------------------------------------

spring.application.name=application
spring.output.ansi.enabled=always
spring.banner.image.pixelmode=block
spring.main.allow-bean-definition-overriding=true
spring.servlet.multipart.enabled=true
spring.servlet.multipart.location=${java.io.tmpdir}
spring.servlet.multipart.max-file-size=10MB

logging.logback.rollingpolicy.max-history=7
logging.logback.rollingpolicy.max-file-size=100MB
logging.logback.rollingpolicy.total-size-cap=1GB
logging.level.org.apache.http=ERROR
logging.level.org.springframework=WARN
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=WARN
logging.level.org.springframework.transaction.interceptor=ERROR

management.endpoint.health.show-details=when_authorized
# Don't do this in production!
management.endpoints.web.exposure.include=health,info,metrics,mappings,scheduledtasks,prometheus,replay
#management.endpoints.jmx.exposure.include=*
#management.endpoint.health.group.liveness.include=db
#management.endpoint.health.group.liveness.show-details=always
management.endpoint.health.probes.enabled=true
management.endpoint.metrics.enabled=true
management.metrics.export.prometheus.enabled=true
management.endpoint.prometheus.enabled=true

###############################################################################
# Application setup
application.axon.retry.interval-milli-seconds=1000
application.axon.retry.max-count=1
application.axon.retry.pool-size=1
application.cors.global.allowed-origins=http://localhost:3000
application.cors.global.allowed-methods=GET,HEAD,POST,DELETE,PATCH,PUT,CONNECT,OPTIONS,TRACE

keycloak.enabled=true
keycloak.realm=default
keycloak.resource=default-client
keycloak.auth-server-url=http://localhost:8180/auth
keycloak.public-client=true
keycloak.use-resource-role-mappings=true
keycloak.confidential-port=0

kc.server.admin-email=admin@everest.engineering
kc.server.admin-password=ac0n3x72
kc.server.master-realm.default.client-id=admin-cli
kc.server.connection.pool-size=10

###############################################################################
# Filestore

# In-memory. Great for development. Not so good for production.
application.filestore.backend=inMemory

# AWS S3
#application.filestore.backend=awsS3
#application.filestore.awsS3.buckets.permanent=permanent
#application.filestore.awsS3.buckets.ephemeral=ephemeral
#application.filestore.awsS3.endpoint=sgp1.digitaloceanspaces.com
#application.filestore.awsS3.accessKeyId=ACCESS_KEY_ID
#application.filestore.awsS3.secretKey=SECRET_KEY

# GridFS - add 'org.springframework.boot:spring-boot-starter-data-mongodb' launcher dependency when enabling
#application.filestore.backend=mongoGridFs
#application.filestore.deletion.batch-size=200

###############################################################################
# Database

# If using Mongo GridFS
#spring.data.mongodb.host=localhost
#spring.data.mongodb.port=27017
#spring.data.mongodb.database=test

lhotse.liquibase.change-log=classpath:database/lhotse.xml
lhotse.datasource.hikari.jdbcUrl=jdbc:postgresql://localhost:5432/lhotse?prepareThreshold=0
lhotse.datasource.hikari.poolName=HikariPool-lhotse
lhotse.datasource.hikari.username=lhotse
lhotse.datasource.hikari.password=lhotse
lhotse.datasource.hikari.maximumPoolSize=40
lhotse.datasource.hikari.driver-class-name=org.postgresql.Driver
lhotse.jpa.properties.hibernate.create_empty_composites.enabled=true
# See https://hibernate.atlassian.net/browse/HHH-12368
lhotse.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
lhotse.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
lhotse.jpa.show-sql=false
