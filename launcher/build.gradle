buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.springframework.boot'
}

springBoot {
    buildInfo()
}

bootBuildInfo.mustRunAfter processResources

bootBuildImage {
    imageName = "$organisation/$rootProject.name:$project.version"
}

compileJava.dependsOn(processResources)

test {
    systemProperty "org.gradle.project.buildDir", "$project.buildDir"
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

dependencies {
    implementation project(':api')
    implementation project(':axon-support')
    implementation project(':common')
    implementation project(':command-validation-support')
    implementation project(':organizations')
    implementation project(':organizations-api')
    implementation project(':organizations-persistence')
    implementation project(':pending-registrations')
    implementation project(':pending-registrations-api')
    implementation project(':pending-registrations-persistence')
    implementation project(':users')
    implementation project(':users-api')
    implementation project(':users-persistence')

    implementation "engineering.everest.starterkit:axon-command-distribution-extension:${axonHazelcastCommandDistributionVersion}"
    implementation "engineering.everest.starterkit:security:${securityVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "com.h2database:h2:${h2Version}"
    implementation "org.axonframework:axon-micrometer:${axonVersion}"
    implementation "io.micrometer:micrometer-core:${microMeterPrometheusVersion}"
    implementation "io.micrometer:micrometer-registry-prometheus:${microMeterPrometheusVersion}"
    implementation "io.prometheus:simpleclient:${prometheusSimpleClientVersion}"
    implementation "io.prometheus:simpleclient_hotspot:${prometheusSimpleClientVersion}"
    implementation "io.prometheus:simpleclient_pushgateway:${prometheusSimpleClientVersion}"
    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"
    implementation "org.postgresql:postgresql:${postgresDriverVersion}"
    implementation "com.amazonaws:aws-java-sdk-s3:${awsSdkVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-starter-webflux"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.apache.commons:commons-text:${commonsTextVersion}"
    testImplementation "org.bouncycastle:bcpkix-jdk15on:${bouncyCastleVersion}"
}
